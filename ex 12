#include <stdio.h>
#include <stdint.h>

uint64_t solve(uint64_t cols, uint64_t d1, uint64_t d2, uint64_t mask) {
    if (cols == mask) return 1; // all N columns occupied by queens
    uint64_t count = 0;
    uint64_t free = ~(cols | d1 | d2) & mask; // positions available this row
    while (free) {
        uint64_t pick = free & -free; // lowest set bit
        free -= pick;
        count += solve(cols | pick, (d1 | pick) << 1, (d2 | pick) >> 1, mask);
    }
    return count;
}

int main(void) {
    int N;
    if (scanf("%d", &N) != 1) return 0;
    if (N < 1) { printf("0\n"); return 0; }
    if (N > 63) { // safety: our bitmask uses 64-bit
        printf("0\n");
        return 0;
    }
    uint64_t mask = (N == 64) ? ~(uint64_t)0 : ((uint64_t)1 << N) - 1;
    uint64_t ans = solve(0, 0, 0, mask);
    printf("%llu\n", (unsigned long long)ans);
    return 0;
}
